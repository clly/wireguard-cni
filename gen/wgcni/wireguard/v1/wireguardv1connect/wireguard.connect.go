// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wgcni/wireguard/v1/wireguard.proto

package wireguardv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/clly/wireguard-cni/gen/wgcni/wireguard/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// WireguardServiceName is the fully-qualified name of the WireguardService service.
	WireguardServiceName = "wgcni.wireguard.v1.WireguardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WireguardServiceRegisterProcedure is the fully-qualified name of the WireguardService's Register
	// RPC.
	WireguardServiceRegisterProcedure = "/wgcni.wireguard.v1.WireguardService/Register"
	// WireguardServicePeersProcedure is the fully-qualified name of the WireguardService's Peers RPC.
	WireguardServicePeersProcedure = "/wgcni.wireguard.v1.WireguardService/Peers"
)

// WireguardServiceClient is a client for the wgcni.wireguard.v1.WireguardService service.
type WireguardServiceClient interface {
	// Register will register a wireguard peer
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Peers rpc will return a list of all wireguard peers
	Peers(context.Context, *connect.Request[v1.PeersRequest]) (*connect.Response[v1.PeersResponse], error)
}

// NewWireguardServiceClient constructs a client for the wgcni.wireguard.v1.WireguardService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWireguardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WireguardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wireguardServiceClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+WireguardServiceRegisterProcedure,
			opts...,
		),
		peers: connect.NewClient[v1.PeersRequest, v1.PeersResponse](
			httpClient,
			baseURL+WireguardServicePeersProcedure,
			opts...,
		),
	}
}

// wireguardServiceClient implements WireguardServiceClient.
type wireguardServiceClient struct {
	register *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	peers    *connect.Client[v1.PeersRequest, v1.PeersResponse]
}

// Register calls wgcni.wireguard.v1.WireguardService.Register.
func (c *wireguardServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Peers calls wgcni.wireguard.v1.WireguardService.Peers.
func (c *wireguardServiceClient) Peers(ctx context.Context, req *connect.Request[v1.PeersRequest]) (*connect.Response[v1.PeersResponse], error) {
	return c.peers.CallUnary(ctx, req)
}

// WireguardServiceHandler is an implementation of the wgcni.wireguard.v1.WireguardService service.
type WireguardServiceHandler interface {
	// Register will register a wireguard peer
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Peers rpc will return a list of all wireguard peers
	Peers(context.Context, *connect.Request[v1.PeersRequest]) (*connect.Response[v1.PeersResponse], error)
}

// NewWireguardServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWireguardServiceHandler(svc WireguardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	wireguardServiceRegisterHandler := connect.NewUnaryHandler(
		WireguardServiceRegisterProcedure,
		svc.Register,
		opts...,
	)
	wireguardServicePeersHandler := connect.NewUnaryHandler(
		WireguardServicePeersProcedure,
		svc.Peers,
		opts...,
	)
	return "/wgcni.wireguard.v1.WireguardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WireguardServiceRegisterProcedure:
			wireguardServiceRegisterHandler.ServeHTTP(w, r)
		case WireguardServicePeersProcedure:
			wireguardServicePeersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWireguardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWireguardServiceHandler struct{}

func (UnimplementedWireguardServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wgcni.wireguard.v1.WireguardService.Register is not implemented"))
}

func (UnimplementedWireguardServiceHandler) Peers(context.Context, *connect.Request[v1.PeersRequest]) (*connect.Response[v1.PeersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wgcni.wireguard.v1.WireguardService.Peers is not implemented"))
}
