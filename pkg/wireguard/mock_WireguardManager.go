// Code generated by mockery v2.40.1. DO NOT EDIT.

package wireguard

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
	wgtypes "golang.zx2c4.com/wireguard/wgctrl/wgtypes"
)

// MockWireguardManager is an autogenerated mock type for the WireguardManager type
type MockWireguardManager struct {
	mock.Mock
}

// Config provides a mock function with given fields: w
func (_m *MockWireguardManager) Config(w io.Writer) error {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Device provides a mock function with given fields:
func (_m *MockWireguardManager) Device() *wgtypes.Device {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Device")
	}

	var r0 *wgtypes.Device
	if rf, ok := ret.Get(0).(func() *wgtypes.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wgtypes.Device)
		}
	}

	return r0
}

// Down provides a mock function with given fields: device
func (_m *MockWireguardManager) Down(device string) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for Down")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPeers provides a mock function with given fields: device, peers
func (_m *MockWireguardManager) SetPeers(device string, peers []*Peer) error {
	ret := _m.Called(device, peers)

	if len(ret) == 0 {
		panic("no return value specified for SetPeers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*Peer) error); ok {
		r0 = rf(device, peers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Up provides a mock function with given fields: device
func (_m *MockWireguardManager) Up(device string) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for Up")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockWireguardManager creates a new instance of MockWireguardManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWireguardManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWireguardManager {
	mock := &MockWireguardManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
