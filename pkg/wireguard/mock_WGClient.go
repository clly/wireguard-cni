// Code generated by mockery v2.40.1. DO NOT EDIT.

package wireguard

import (
	mock "github.com/stretchr/testify/mock"
	wgtypes "golang.zx2c4.com/wireguard/wgctrl/wgtypes"
)

// MockWGClient is an autogenerated mock type for the WGClient type
type MockWGClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockWGClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfigureDevice provides a mock function with given fields: name, cfg
func (_m *MockWGClient) ConfigureDevice(name string, cfg wgtypes.Config) error {
	ret := _m.Called(name, cfg)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, wgtypes.Config) error); ok {
		r0 = rf(name, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Device provides a mock function with given fields: name
func (_m *MockWGClient) Device(name string) (*wgtypes.Device, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Device")
	}

	var r0 *wgtypes.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*wgtypes.Device, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *wgtypes.Device); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wgtypes.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Devices provides a mock function with given fields:
func (_m *MockWGClient) Devices() ([]*wgtypes.Device, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Devices")
	}

	var r0 []*wgtypes.Device
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*wgtypes.Device, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*wgtypes.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*wgtypes.Device)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockWGClient creates a new instance of MockWGClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWGClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWGClient {
	mock := &MockWGClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
